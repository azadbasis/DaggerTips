// Generated by Dagger (https://google.github.io/dagger).
package com.daggertips;

import com.daggertips.model.Car;
import com.daggertips.model.Car_Factory;
import com.daggertips.model.Car_MembersInjector;
import com.daggertips.model.Engine;
import com.daggertips.model.Remote;
import com.daggertips.model.Wheels;
import dagger.internal.Preconditions;

public final class DaggerCarComponent implements CarComponent {
  private WheelsModule wheelsModule;

  private DaggerCarComponent(Builder builder) {
    this.wheelsModule = builder.wheelsModule;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CarComponent create() {
    return new Builder().build();
  }

  private Wheels getWheels() {
    return WheelsModule_ProvideWheelsFactory.proxyProvideWheels(
        wheelsModule,
        WheelsModule_ProvideRimsFactory.proxyProvideRims(wheelsModule),
        WheelsModule_ProvideTiresFactory.proxyProvideTires(wheelsModule));
  }

  @Override
  public Car getCar() {
    return injectCar(Car_Factory.newCar(new Engine(), getWheels()));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private Car injectCar(Car instance) {
    Car_MembersInjector.injectEnableRemote(instance, new Remote());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectCar(instance, getCar());
    return instance;
  }

  public static final class Builder {
    private WheelsModule wheelsModule;

    private Builder() {}

    public CarComponent build() {
      if (wheelsModule == null) {
        this.wheelsModule = new WheelsModule();
      }
      return new DaggerCarComponent(this);
    }

    public Builder wheelsModule(WheelsModule wheelsModule) {
      this.wheelsModule = Preconditions.checkNotNull(wheelsModule);
      return this;
    }
  }
}
