// Generated by Dagger (https://google.github.io/dagger).
package com.daggertips.dagger;

import com.daggertips.model.Rims;
import com.daggertips.model.Tires;
import com.daggertips.model.Wheels;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class WheelsModule_ProvideWheelsFactory implements Factory<Wheels> {
  private final WheelsModule module;

  private final Provider<Rims> rimsProvider;

  private final Provider<Tires> tiresProvider;

  public WheelsModule_ProvideWheelsFactory(
      WheelsModule module, Provider<Rims> rimsProvider, Provider<Tires> tiresProvider) {
    this.module = module;
    this.rimsProvider = rimsProvider;
    this.tiresProvider = tiresProvider;
  }

  @Override
  public Wheels get() {
    return provideInstance(module, rimsProvider, tiresProvider);
  }

  public static Wheels provideInstance(
      WheelsModule module, Provider<Rims> rimsProvider, Provider<Tires> tiresProvider) {
    return proxyProvideWheels(module, rimsProvider.get(), tiresProvider.get());
  }

  public static WheelsModule_ProvideWheelsFactory create(
      WheelsModule module, Provider<Rims> rimsProvider, Provider<Tires> tiresProvider) {
    return new WheelsModule_ProvideWheelsFactory(module, rimsProvider, tiresProvider);
  }

  public static Wheels proxyProvideWheels(WheelsModule instance, Rims rims, Tires tires) {
    return Preconditions.checkNotNull(
        instance.provideWheels(rims, tires),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
